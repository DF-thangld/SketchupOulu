{% extends "base.html" %}
{% block custom_css %}

{% endblock %}
{% block menu %}
	{% include 'user_menu.html' %}
{% endblock %}

{% block onload_script %}
// threejs functions
{% set index = 0 %}
{% for building_model in building_models %}
init_building_model('{{ building_model.id }}', '{{ building_model.file_type }}', '{{ building_model.addition_information|tojson }}', {{ index }});
{% set index = index + 1 %}
{% endfor %}
init();
animate();
{% endblock %}

{% block js_script %}
var building_models = [];
var objects = [];
if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

//constant
var WORLD_SIZE = 1000; //side length of the square world
var BLOCK_SIZE = 50;
var MOVING_SPEED = 10;
var DEFAULT_HEIGHT = 1000;
var DEFAULT_DISTANCE = 100;

// threejs variables
var container;
var camera, scene, renderer,controls;
var plane;

// keyboard control variables
var move_forward = false, move_backward = false, move_left = false, move_right = false, move_up = false, move_down = false, is_rotating = false;
var rotate_angle = 0;
var current_view = 0;
var views = [{'x': 0, 'y':DEFAULT_HEIGHT, 'z': -1*WORLD_SIZE-DEFAULT_DISTANCE},
			{'x': WORLD_SIZE+DEFAULT_DISTANCE, 'y':DEFAULT_HEIGHT, 'z': 0},
			{'x': 0, 'y':DEFAULT_HEIGHT, 'z': WORLD_SIZE+DEFAULT_DISTANCE},
			{'x': -1*WORLD_SIZE-DEFAULT_DISTANCE, 'y':DEFAULT_HEIGHT, 'z': 0}];
var center_position = new THREE.Vector3( 0, 0, 0 );

//
var mouse_start_positions = [];

var raycaster = new THREE.Raycaster(); // create once and reuse
var mouse = new THREE.Vector2(); // create once and reuse
var isShiftDown = false;

//whether intersect with plane or objects
var intersectObjects=[];
var IsOnTop=false;


//all the vasiable objects in the scene
{% if 'addition_information' in request.form %}
var sceneObjects = {{ request.form.get('addition_information')|safe }};
{% else %}
var sceneObjects = {};
{% endif %}
//3D models various
//var chooseModel=0;
var modelsInfo;
var models = []; //models get from databsed, no contain repeated models
var currentModelIndex;
var loaded_objects_number = 0;
var current_object = null;

//dropdown list
var geometryIndex = 0;
var modeIndex = -1;

var isSelect;
var selectedModel;

var windowRatio = 2;
var windowWidth = 972;
var windowHeight = 500;

var stats;

function init_building_model(id, file_type, information, index)
{
    $('#building_model_' + id).css('height', $('#building_model_' + id).width()*3/4);
    information = JSON.parse(information);

    // variables
    var building_scene = new THREE.Scene();
    building_scene.name = "scene_building_model_" + id;
    var SCREEN_WIDTH = $('#building_model_' + id).innerWidth()-8, SCREEN_HEIGHT = $('#building_model_' + id).innerHeight()-8;
    var VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 0.1, FAR = 20000;
    var building_camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR);
    building_camera.position.set(information.camera_x, information.camera_y, information.camera_z*1.5);
    building_camera.lookAt(new THREE.Vector3( information.camera_lookat_x, information.camera_lookat_y, information.camera_lookat_z ));
    building_scene.add(building_camera);

    // RENDERER
    var building_renderer;
    if ( Detector.webgl )
        building_renderer = new THREE.WebGLRenderer( {antialias:true} );
    else
        building_renderer = new THREE.CanvasRenderer();
    building_renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
    building_renderer.setClearColor( 0xffffff, 1 );
    var building_container = document.getElementById( 'building_model_' +id );
    building_container.appendChild( building_renderer.domElement );

    //LIGHT
    var ambientLight = new THREE.AmbientLight(0xffffff);
    building_scene.add(ambientLight);

    //object
    load_model( file_type,
                '{{ url_for('static', filename='models/building_models/') }}' + information.directory + '/',
                information.original_filename,
                {'id': id, 'x': 0, 'y': 0, 'z': 0, 'size': 1, 'rotate_x': 0, 'rotate_y': 0, 'rotate_z': 0},
                building_scene,
                function(object)
                {
                    models[index] = object;
                });

    //move objects to global arrays
    building_models.push({"id": id, "renderer": building_renderer, 'camera': building_camera, 'scene': building_scene});
    building_renderer.render( building_scene, building_camera );
}

function init()
{
	windowRatio = document.getElementById("ModelWindow").offsetWidth/document.getElementById("ModelWindow").offsetHeight;
	windowWidth = document.getElementById("ModelWindow").offsetWidth;
	windowHeight = document.getElementById("ModelWindow").offsetHeight;

	scene = new THREE.Scene();
    scene.name = "add_scenario_scene";
	
	isSelect = false;// no object has been selected
	selectedModel = null;
	
	//load model information
	THREE.Loader.Handlers.add( /\.dds$/i, new THREE.DDSLoader() );


	//pre-defined objects
	for (var model_id in sceneObjects)
	{
		var model = sceneObjects[model_id];
		console.log(model);
		load_model( model.file_type,
					'{{ url_for('static', filename='models/building_models/') }}' + model.directory + '/',
					model.original_filename,
					model,
					scene);
	}

	//document
	//container = document.createElement( 'div' );
	//document.body.appendChild( container );
	
	container = document.getElementById("ModelWindow");
	//webgl
	camera = new THREE.PerspectiveCamera( 45, windowRatio, 1, 10000 );
	camera.position.set( views[0].x, views[0].y, views[0].z );
	camera.target = center_position;
	camera.lookAt( camera.target );

	//light
	var ambient = new THREE.AmbientLight( 0xffffff );
	scene.add( ambient );

	//1. build the grid

	var size = WORLD_SIZE/2, step = BLOCK_SIZE;

	var geometry = new THREE.Geometry();

	for ( var i = - size; i <= size; i += step ) {

		geometry.vertices.push( new THREE.Vector3( - size, 0, i ) );
		geometry.vertices.push( new THREE.Vector3(   size, 0, i ) );

		geometry.vertices.push( new THREE.Vector3( i, 0, - size ) );
		geometry.vertices.push( new THREE.Vector3( i, 0,   size ) );
		
	}
	
	var material = new THREE.LineBasicMaterial( { color: 0x000000, opacity: 0.5, transparent: true } );

	var line = new THREE.LineSegments( geometry, material );
	IsOnTop=false;
	scene.add( line );

	//create the lowest base, unvisible, just used for detect where to place the models
	geometry = new THREE.PlaneBufferGeometry( WORLD_SIZE, WORLD_SIZE );
	geometry.rotateX( - Math.PI / 2 );

	//plane = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { visible: false } ) );
	plane = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( ) );
	intersectObjects=[line];
	scene.add( plane );
	
	// add keyboard events to mode
	document.addEventListener( 'keydown', onDocumentKeyDown, false );
	document.addEventListener( 'keyup', onDocumentKeyUp, false );
	window.addEventListener( 'resize', onWindowResize, false );
	// add mouse events to mode
	document.addEventListener( 'mousemove', onDocumentMouseMove, false );
	document.addEventListener( 'mousedown', onDocumentMouseDown, false );
	document.addEventListener( 'mouseup', onDocumentMouseUp, false );

	// display the scene
	if (window.WebGLRenderingContext)
		renderer = new THREE.WebGLRenderer( { antialias: true } );//using WebGL
	else
		renderer = new THREE.CanvasRenderer(); //using the (slower) Canvas 2D Context API

	renderer.setClearColor( 0xf0f0f0 ); //0xffffff
	renderer.setPixelRatio( window.devicePixelRatio );
	//renderer.setPixelRatio( document.getElementById("ModelWindow").offsetWidth/
	//						document.getElementById("ModelWindow").offsetHeight );
	renderer.setSize( 	document.getElementById("ModelWindow").offsetWidth,
		 				document.getElementById("ModelWindow").offsetHeight
	);
	
	container.appendChild( renderer.domElement );


	//
	stats = new Stats();
	stats.domElement.style.position = 'absolute';
	stats.domElement.style.top = ' 500px';
	container.appendChild( stats.domElement );
	//

	//render
	renderer.render( scene, camera);
}

function add_building_model(information)
{
    if (current_object != null)
        scene.remove(current_object);
	load_model( information.file_type,
				'{{ url_for('static', filename='models/building_models/') }}' + information.directory + '/',
				information.original_filename,
				{'id': "model_" + generate_random_string(50), 'x': 0, 'y': 0, 'z': 0, 'size': 1, 'rotate_x': 0, 'rotate_y': 0, 'rotate_z': 0},
				scene,
				function(object)
				{
					current_object = object;
					object.addition_information = information;
					switchMode(1);
				});
}


function switchMode(i) 
{
	var mode = parseInt(i);
	if(modeIndex ==1 && mode!=1){// from 0 to other
		current_object.visible=false;
	}else if(modeIndex !=1 && mode==1){
		current_object.visible=true;
	}
	modeIndex= mode ;
	switch(modeIndex){
		case 0:{
			break;
		}
		case 1:{
			break;
		}
		case 7:{
			var preview = document.getElementById( "preview" );
			var file    = document.querySelector('input[type=file]').files[0]; //sames as here
			var reader  = new FileReader();
			reader.onloadend = function () {
				preview.src = reader.result;
				
				var loader = new THREE.TextureLoader();
				loader.load(reader.result,function(texture){
					var geometry = new THREE.SphereGeometry( 200, 25, 200 );
					var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: true } );
					var mesh = new THREE.Mesh( geometry, material );
					plane.material= material;
				} );
			}

			if (file) {
				reader.readAsDataURL(file); //reads the data as a URL
			} else {
				preview.src = "";
			}
			break;
		}
		case 8:{
			
			if(IsOnTop){
				//change to build on ground mode
				IsOnTop=false;
				intersectObjects=[plane];
				document.getElementById("buildWhere").innerHTML="Build On Top";
			}else{
				//change to build on top mode
				IsOnTop=true;
				intersectObjects=objects;
				document.getElementById("buildWhere").innerHTML="Build On Ground";
			}
			break;
		}

	}
	
}

function onDocumentMouseMove(event){
	//event.preventDefault();
	
	
    
	var x = event.pageX - $('#ModelWindow').offset().left;
	var y = event.pageY - $('#ModelWindow').offset().top;

	var div_width =document.getElementById("ModelWindow").clientWidth;
	var div_height=document.getElementById("ModelWindow").clientHeight;
	
	
	switch(modeIndex){
		case 0:{//select mode
			if(isSelect == true){
				mouse.set( ( x / div_width ) * 2 - 1, - ( y / div_height ) * 2 + 1 );

				raycaster.setFromCamera( mouse, camera );

				var intersects = raycaster.intersectObjects( [plane], true );
				
				if ( intersects.length > 0 )
				{

					selectedModel.position.x = intersects[0].point.x;
					selectedModel.position.y = intersects[0].point.y;
					selectedModel.position.z = intersects[0].point.z;
					
					//update modelInfos as well
					var selected_model = sceneObjects[selectedModel.name];
					selected_model.x = selectedModel.position.x;
					selected_model.y = selectedModel.position.y;
					selected_model.z = selectedModel.position.z;
				}
			
			}
			break;
		
		}
		case 1:{//add mode
			//http://stackoverflow.com/questions/3234256/find-mouse-position-relative-to-element
	
		
			mouse.set( ( x / div_width ) * 2 - 1, - ( y / div_height ) * 2 + 1 );

			raycaster.setFromCamera( mouse, camera );

			//threejs raycast click detection not working on loaded 3dObject

			var intersects = raycaster.intersectObjects( intersectObjects, true );
			if ( intersects.length > 0 )
			{

				current_object.position.x = intersects[0].point.x;
				current_object.position.y = intersects[0].point.y;
				current_object.position.z = intersects[0].point.z;

			}
			break;
		}
		
	}
	

}
function onDocumentMouseUp( event ) {
	switch(modeIndex){
		case 0:{//select  -- release selected object
			isSelect = false;
			selectedModel = null;
			break;
		}
	}
}
function onDocumentMouseDown( event )
{

	//event.preventDefault(); // this will stop dropdown list working, because all the click function will be prevented include click dropdownlist
	//mouse.set( ( event.clientX / window.innerWidth ) * 2 - 1, - ( event.clientY / window.innerHeight ) * 2 + 1 );
	var x = event.pageX - $('#ModelWindow').offset().left;
	var y = event.pageY - $('#ModelWindow').offset().top;
	var div_width =document.getElementById("ModelWindow").clientWidth;
	var div_height=document.getElementById("ModelWindow").clientHeight;
	mouse.set( ( x / div_width ) * 2 - 1, - ( y / div_height ) * 2 + 1 );

	raycaster.setFromCamera( mouse, camera );

		switch(modeIndex){
			case 0:{//select
				var intersects = raycaster.intersectObjects( objects, true );
				if ( intersects.length > 0 ) {
					var intersect = intersects[ 0 ];
					var obj=intersect.object;
					obj.name;
					while( obj.parent != scene && obj.parent!=null ){
						obj = obj.parent;
						obj.name;
					}

					//operation
					selectedModel = scene.getObjectByName(obj.name);
					isSelect = true;
				}
				break;
			}
			case 1:{//add
				var intersects = raycaster.intersectObjects( [plane], true );
				if ( intersects.length > 0 ) {
					var intersect = intersects[ 0 ];

					var temp_object=current_object.clone();
					temp_object.name = "model_" + generate_random_string(50);

					scene.add( temp_object );
					objects.push(temp_object);
					sceneObjects[temp_object.name]={'id': temp_object.name, 
													'directory': current_object.addition_information.directory,
													'original_filename': current_object.addition_information.original_filename,
													'file_type': current_object.addition_information.file_type,
													'x': temp_object.position.x,
													"y": temp_object.position.y,   
													"z": temp_object.position.z, 
													"size": temp_object.scale.x,     
													"rotate_x": temp_object.rotation.x,
													"rotate_y": temp_object.rotation.y,
													"rotate_z": temp_object.rotation.z};
				}
				break;
			}
			case 2:{//delete mode
				var intersects = raycaster.intersectObjects( objects, true );
				if ( intersects.length > 0 ) {
					var intersect = intersects[ 0 ];
					var obj=intersect.object;
					obj.name;
					while( obj.parent != scene && obj.parent!=null ){
						obj = obj.parent;
						obj.name;
					}

					delete sceneObjects[obj.name];
					scene.remove( scene.getObjectByName(obj.name) );
					objects.splice( objects.indexOf( obj ), 1 );
				}
				
				break;
			}
			case 3:{//Enlarge mode
				var intersects = raycaster.intersectObjects( objects, true );
				if ( intersects.length > 0 ) {
					var intersect = intersects[ 0 ];
					var obj=intersect.object;
					obj.name;
					while( obj.parent != scene && obj.parent!=null ){
						obj = obj.parent;
						obj.name;
					}
					
					scene.getObjectByName(obj.name).scale.multiplyScalar( 1.2 );
					sceneObjects[obj.name].size = scene.getObjectByName(obj.name).scale.x;
				}
				break;
			}
			case 4:{//reduce
				var intersects = raycaster.intersectObjects( objects, true );
				if ( intersects.length > 0 ) {
					var intersect = intersects[ 0 ];
					var obj=intersect.object;
					obj.name;
					while( obj.parent != scene && obj.parent!=null ){
						obj = obj.parent;
						obj.name;
					}
					
					scene.getObjectByName(obj.name).scale.divideScalar( 1.2 );
					sceneObjects[obj.name].size = scene.getObjectByName(obj.name).scale.x;
				}
				break;
			}
			case 5:{//rotate left
				var intersects = raycaster.intersectObjects( objects, true );
				if ( intersects.length > 0 ) {
					var intersect = intersects[ 0 ];
					var obj=intersect.object;
					obj.name;
					while( obj.parent != scene && obj.parent!=null ){
						obj = obj.parent;
						obj.name;
					}
					
					scene.getObjectByName(obj.name).rotateOnAxis(new THREE.Vector3(0,1,0), Math.PI/2/4);
					sceneObjects[obj.name].rotate_x = scene.getObjectByName(obj.name).rotation.x;
					sceneObjects[obj.name].rotate_y = scene.getObjectByName(obj.name).rotation.y;
					sceneObjects[obj.name].rotate_z = scene.getObjectByName(obj.name).rotation.z;

					//console.log(scene.getObjectByName(obj.name));
					console.log(scene.getObjectByName(obj.name).rotation.x, scene.getObjectByName(obj.name).rotation.y, scene.getObjectByName(obj.name).rotation.z);
				}
				break;
			}
			case 6:{//rotate right
				var intersects = raycaster.intersectObjects( objects, true );
				if ( intersects.length > 0 ) {
					var intersect = intersects[ 0 ];
					var obj=intersect.object;
					obj.name;
					while( obj.parent != scene && obj.parent!=null ){
						obj = obj.parent;
						obj.name;
					}
					
					scene.getObjectByName(obj.name).rotateOnAxis(new THREE.Vector3(0,1,0), -Math.PI/2/4);
					sceneObjects[obj.name].rotate_x = scene.getObjectByName(obj.name).rotation.x;
					sceneObjects[obj.name].rotate_y = scene.getObjectByName(obj.name).rotation.y;
					sceneObjects[obj.name].rotate_z = scene.getObjectByName(obj.name).rotation.z;
				}
				break;
			}

		}
		
		render();
	
}

function onDocumentKeyDown(event)
{
	switch ( event.keyCode ) {

		case 16: isShiftDown = true; break; //shift, delete mode with click
		case 38: move_forward = true; break; // up
		case 40: move_backward = true; break; // down
		case 37: move_left = true; break; // left
		case 39: move_right = true; break; // right
		case 87: move_up = true; break; // w
		case 83: move_down = true; break; // s
		//case 65: targetMoveLeft = true; break; // a
		//case 68: targetMoveRight = true; break; // d
		
		case 90: is_rotating = true; break; // z

		//case 78: chooseModel=1;//n choose next model
		//case 77: chooseModel=-1;//m choose previous model

	}
}

function onDocumentKeyUp(event)
{
	switch ( event.keyCode ) {

		case 16: isShiftDown = false; break; //shift
		case 38: move_forward = false; break; // up
		case 40: move_backward = false; break; // down
		case 37: move_left = false; break; // left
		case 39: move_right = false; break; // right
		case 87: move_up = false; break; // w
		case 83: move_down = false; break; // s
		//case 65: targetMoveLeft = false; break; // a
		//case 68: targetMoveRight = false; break; // d
		case 90: is_rotating = false; break; // z

	}
}


// change window size
function onWindowResize()
{

	//camera.aspect = window.innerWidth / window.innerHeight;
	camera.aspect = windowRatio;
	camera.updateProjectionMatrix();

	//renderer.setSize( window.innerWidth, window.innerHeight );
	
	renderer.setSize( 	document.getElementById("ModelWindow").offsetWidth,
		 				document.getElementById("ModelWindow").offsetHeight
	);
}

function animate() {

	requestAnimationFrame( animate );

	//controls.update();
	
	
	stats.update();
	
	render();

}

function render() 
{

	// 2.1 move around the scene
	
	var cameraMove = false;// camera is moving, then need to calculate the metric
	if (move_forward){
		switch(current_view)
		{
			case 0: camera.position.z += MOVING_SPEED; break;
			case 1: camera.position.x -= MOVING_SPEED; break;
			case 2: camera.position.z -= MOVING_SPEED; break;
			case 3: camera.position.x += MOVING_SPEED; break;
		}
		cameraMove =true;
	}
	if (move_backward)
	{
		switch(current_view)
		{
			case 0: camera.position.z -= MOVING_SPEED; break;
			case 1: camera.position.x += MOVING_SPEED; break;
			case 2: camera.position.z += MOVING_SPEED; break;
			case 3: camera.position.x -= MOVING_SPEED; break;
		}
		cameraMove =true;
	}
	if (move_left)
	{
		switch(current_view)
		{
			case 0: camera.position.x += MOVING_SPEED; break;
			case 1: camera.position.z += MOVING_SPEED; break;
			case 2: camera.position.x -= MOVING_SPEED; break;
			case 3: camera.position.z -= MOVING_SPEED; break;
		}
		cameraMove =true;
	}
	if (move_right)
	{
		switch(current_view)
		{
			case 0: camera.position.x -= MOVING_SPEED; break;
			case 1: camera.position.z -= MOVING_SPEED; break;
			case 2: camera.position.x += MOVING_SPEED; break;
			case 3: camera.position.z += MOVING_SPEED; break;
		}
		cameraMove =true;
	}
	if (move_up)
	{
		camera.position.y += MOVING_SPEED;
		cameraMove =true;
	}
	if (move_down)
	{
		camera.position.y -= MOVING_SPEED;
		cameraMove =true;
	}
	
	// 2.2 rotating
	if (is_rotating)
	{
		current_view++;
		if (current_view >= views.length)
			current_view = 0;
		
		// remember current position
		var current_x = camera.position.x;
		var current_y = camera.position.y;
		var current_z = camera.position.z;
		
		// go to pre-defined position
		camera.position.x = views[current_view].x;
		camera.position.y = views[current_view].y;
		camera.position.z = views[current_view].z;
		
		camera.target = center_position;
		camera.lookAt( camera.target );
		
		// only rotate one time per click
		is_rotating = false;
		cameraMove =true;
	}

	if(cameraMove){
		//var metric= Math.ceil( camera.position.sub(new THREE.Vector3( 0, 0, 0 )).length()/100 );
		var metric= Math.ceil( camera.position.y/10 );
    	//console.debug( metric );
    
    	document.getElementById("metric").innerHTML=metric +"m";
	}
	
	//mouse position
	
	
	// random stuffs
	
	
	// update the scene
	renderer.render( scene, camera );
    for (i=0; i < building_models.length; i++)
    {
        var building_model = building_models[i];
        building_model['renderer'].render( building_model['scene'], building_model['camera'] );
    }
}


function before_submit()
{
    sceneObjects['size'] = WORLD_SIZE;
	$('#addition_information').val(JSON.stringify(sceneObjects));
}

{% endblock %}

{% block main_content %}
<div class="row" style="margin-top: 20px;">

	<div class="col-lg-10 col-centered">
        <ol class = "breadcrumb">
           <li><a href = "{{ url_for('index') }}">Home</a></li>
           <li class = "active"><a href="{{ url_for('users.profile', username=g.user.username) }}">{{ g.user.username }}</a></li>
           <li class = "active">New Scenario</li>
        </ol>
		<h2 style="font-size: 45px;">New Scenario</h2>

		<form accept-charset="UTF-8" action="{{ url_for('users.add_scenario') }}" autocomplete="off"
			class="setup-form js-form-signup-detail" onsubmit="before_submit();"
			method="post">
            <input type="hidden" name="addition_information" value="" id="addition_information"/>
			<div style="margin: 0; padding: 0; display: inline">
			</div>

           {% if errors|length > 0 %}
            <div id="js-flash-container" class="col-centered" style="color: #911;background-color: #fcdede;border-radius: 3px;border: 1px solid #d8dee2;padding:15px;margin-top:20px;font-size: 14px;border-radius: 5px;">
                  <div class="container">
                  There were problems creating your scenario:
                      {% for error in errors %}
                          <div>- {{ error }}</div>
                      {% endfor %}
                  </div>
            </div>
            {% endif %}
			<dl class="form">
				<dt class="input-label">
					<label autocapitalize="off" autofocus="autofocus" for="name">Scenario name</label>
				</dt>
				<dd>
                    <input type="text" id="name" name="name" autocapitalize="off" autofocus="autofocus" style="width:100%" value="{{ request.form.get('name', '') }}">
				</dd>
			</dl>
            <dl class="form">
				<dt class="input-label">
					<label autocapitalize="off" autofocus="autofocus" for="description">Description</label>
				</dt>
				<dd>
                    <textarea id="description" name="description" style="width:100%;min-height:30px;height:100px;">{{ request.form.get('description', '') }}</textarea>
				</dd>
			</dl>
			<dl class="form">
				<dt class="input-label">
					<label autocapitalize="off" for="is_public">Public</label> <input type="checkbox" id="is_public" name="is_public" value="1" checked/>
				</dt>
				<dd>

				</dd>
			</dl>
			<dl class="form successed">
				<dt class="input-label">
                    Model
				</dt>
				<dd>
                    <div style="width:20%;height:500px;border:1px solid black; float:left; text-align: center;" id="ControlWindow">
                    	<div><b>Model Control:</b></div>
                        <div><button onclick="enlarge_scenario()" class="operation-button" type="button" >Enlarge scenario</button></div>
                        <div><button onclick="shrink_scenario()" class="operation-button" type="button" >Shrink scenario</button></div>
                    	<div><b>Model Control:</b></div>
                    	<div><button onclick="switchMode('0')" class="operation-button" type="button" >Move Model</button></div>
                    	<div><button onclick="switchMode('2')" class="operation-button" type="button" >Delete Model</button></div>
                    	<div><button onclick="switchMode('3')" class="operation-button" type="button" >Enlarge Model</button></div>
                    	<div><button onclick="switchMode('4')" class="operation-button" type="button" >Reduce Model</button></div>
                    	<div><button onclick="switchMode('5')" class="operation-button" type="button" >Rotate Left</button></div>
                    	<div><button onclick="switchMode('6')" class="operation-button" type="button" >Rotate Right</button></div>
                    	<div><button id = "buildWhere" onclick="switchMode('8')" class="operation-button" type="button" >Build On Top</button></div>
                    	<div><b>Set Backgroud:</b><input type="file" onchange="switchMode('7')">
							<img id="preview" src="" height="35" alt="Image preview...">
                    	</div>
                    </div>
                   
					<div style="width:80%;height:500px; float:right" id="ModelWindow"></div>
					<div id="infoHeader" style="position: absolute; padding-top: 0.5em; width: 100%; text-align: center; font-size: 100%; color: #000000;">
						<img id="metric_pic" src={{ url_for('static', filename='images/metric.png') }} alt="Metric" style="width:100px;height:20px">
						<span id="metric">100m</span>
					</div>
                    <div style="clear:both"></div>
                    <div id="available_building_models" class="carousel slide" data-interval="0" style="margin-top:10px;width:100%;min-height:150px;border: 1px solid #ddd;border-radius: 4px;padding: 4px;line-height: 1.42857143;">
                        <!-- Wrapper for slides -->
                        <div class="carousel-inner" role="listbox">
                            {% set index = 0 %}
                            {% for building_model in building_models %}
                                {% if index%5 == 0 %}
                                <div class="item{% if index==0 %} active{% endif %}" style="padding-left:7%;padding-right:7%">
                                {% endif %}
                                    <div class="col-lg-2" style="margin-top:5px;background-color: #fff;margin-left:25px;" onclick='add_building_model({"directory": "{{ building_model.addition_information.directory }}", "original_filename": "{{ building_model.addition_information.original_filename }}", "file_type": "{{ building_model.file_type }}"});'>
                                        <div id="building_model_{{ building_model.id }}" style="border: 1px solid #ddd;border-radius: 4px;padding: 4px;line-height: 1.42857143;width:100%;cursor: pointer; cursor: hand;"></div>
                                        {{ building_model.name }}
                                    </div>
                                {% set index = index + 1 %}
                                {% if index%5 == 0 %}
                                    <div style="clear:both"></div>
                                </div>
                                {% endif %}
                            {% endfor %}
                            {% if index%5 != 0 %}
                                <div style="clear:both"></div>
                            </div>
                            {% endif %}

                        </div>

                          <!-- Left and right controls -->
                          <a class="left carousel-control" href="#available_building_models" role="button" data-slide="prev" style="width:5%;min-height:150px;">
                            <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                          </a>
                          <a class="right carousel-control" href="#available_building_models" role="button" data-slide="next" style="width:5%;min-height:130px;">
                            <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                          </a>
                    </div>
				</dd>
			</dl>
			<div class="form-actions">
                <button type="submit" class="btn btn-warning" id="bttn_create">Create model</button>
				<button type="reset" class="btn btn-primary" id="bttn_reset">Back</button>
			</div>

		</form>

	</div>
</div>
{% endblock %}
