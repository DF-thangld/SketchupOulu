{% extends "base.html" %}
{% block custom_css %}

{% endblock %}

{% block onload_script %}
    get_user_scenarios();
    
    $(document).on('click', '.well a', function() {
	   $(".well a").removeClass("active");
	   $(this).addClass("active");
	});
    $('#new_comment').autoHeight();
     // threejs functions
	init();
	animate();
{% endblock %}

{% block js_script %}
if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

//constant
var WORLD_SIZE = 1000; //side length of the square world
var BLOCK_SIZE = 50;
var MOVING_SPEED = 10;
var DEFAULT_HEIGHT = 1000;
var DEFAULT_DISTANCE = 100;



// threejs variables
var container;
var camera, scene, renderer,controls;
//var  gui = new dat.GUI();
//var controlPanel;//a list contains buttons and preview pictures
var plane;

// keyboard control variables
var move_forward = false, move_backward = false, move_left = false, move_right = false, move_up = false, move_down = false, is_rotating = false;
var rotate_angle = 0;
var current_view = 0;
var views = [{'x': 0, 'y':DEFAULT_HEIGHT, 'z': -1*WORLD_SIZE-DEFAULT_DISTANCE},
			{'x': WORLD_SIZE+DEFAULT_DISTANCE, 'y':DEFAULT_HEIGHT, 'z': 0},
			{'x': 0, 'y':DEFAULT_HEIGHT, 'z': WORLD_SIZE+DEFAULT_DISTANCE},
			{'x': -1*WORLD_SIZE-DEFAULT_DISTANCE, 'y':DEFAULT_HEIGHT, 'z': 0}];
var center_position = new THREE.Vector3( 0, 0, 0 );

//
var mouse_start_positions = [];

var raycaster = new THREE.Raycaster(); // create once and reuse
var mouse = new THREE.Vector2(); // create once and reuse
var isShiftDown = false;


//all the vasiable objects in the scene
var objects = [];//different objects may use same models
var sceneObjects = {};//store information of objects including Model name and position

//3D models various
//var chooseModel=0;
var modelsInfo;
var models; //models get from databsed, no contain repeated models
var currentModelIndex;
var loaded_objects_number;

//dropdown list
var modeInfo = ["Add Model","Delete Model","Enlarge Model","Reduce Model","Rotate Left","Rotate Right"];
var geometryIndex = 0;
var modeIndex = 0;

var windowRatio = 2;
var windowWidth = 972;
var windowHeight = 500;
function init()
{
	windowRatio = document.getElementById("ModelWindow").offsetWidth/document.getElementById("ModelWindow").offsetHeight;
	windowWidth = document.getElementById("ModelWindow").offsetWidth;
	windowHeight = document.getElementById("ModelWindow").offsetHeight;

	scene = new THREE.Scene();

	//load model information
	THREE.Loader.Handlers.add( /\.dds$/i, new THREE.DDSLoader() );

	models = [];
	modelsInfo = Communicator.getModelsFromDB("Project's name");
	sceneObjects = Communicator.getSceneFromDB("Project's name");
	loaded_objects_number=0;
	for ( var i = 0; i < modelsInfo.length; i++) {
		var model = modelsInfo[i];
		var loader = new THREE.OBJMTLLoader();
		loader.load( model.objPath, model.mtlPath, function ( object ) {

			object.name = models.modelName;

			models[models.length]=object;

			
			loaded_objects_number=loaded_objects_number+1;
					if( loaded_objects_number == modelsInfo.length){
						//make loading scene objects at last to make sure the 3D Object has been loaded
						//add predefined scene objects
					
						
						for(var property in sceneObjects){
						    if( sceneObjects.hasOwnProperty(property) ){
						        var model = sceneObjects[property];
							    var obj = models[parseInt(model.index)].clone();
							    obj.name = model.name;
							    obj.position.x = model.x;
							    obj.position.y = model.y;
							    obj.position.z = model.z;
							    scene.add( obj );
                                objects.push( obj );    
						    }
						}
					}
		});
	}
	
	container = document.getElementById("ModelWindow");
	
	//webgl

	//camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 10000 );
	camera = new THREE.PerspectiveCamera( 45, windowRatio, 1, 10000 );
	camera.position.set( views[0].x, views[0].y, views[0].z );
	camera.target = center_position;
	camera.lookAt( camera.target );

	

	//light
	var ambient = new THREE.AmbientLight( 0xffffff );
	scene.add( ambient );

	
	//1. build the grid

	var size = WORLD_SIZE/2, step = BLOCK_SIZE;

	var geometry = new THREE.Geometry();

	for ( var i = - size; i <= size; i += step ) {

		geometry.vertices.push( new THREE.Vector3( - size, 0, i ) );
		geometry.vertices.push( new THREE.Vector3(   size, 0, i ) );

		geometry.vertices.push( new THREE.Vector3( i, 0, - size ) );
		geometry.vertices.push( new THREE.Vector3( i, 0,   size ) );
		
	}
	
	var material = new THREE.LineBasicMaterial( { color: 0x000000, opacity: 0.5, transparent: true } );

	var line = new THREE.LineSegments( geometry, material );
	scene.add( line );
	

	//create the lowest base, unvisible, just used for detect where to place the models
	geometry = new THREE.PlaneBufferGeometry( WORLD_SIZE, WORLD_SIZE );
	geometry.rotateX( - Math.PI / 2 );

	plane = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { visible: false } ) );
	scene.add( plane );



	// add keyboard events to mode
	document.addEventListener( 'keydown', onDocumentKeyDown, false );
	document.addEventListener( 'keyup', onDocumentKeyUp, false );
	window.addEventListener( 'resize', onWindowResize, false );

	// display the scene
	if (window.WebGLRenderingContext)
		renderer = new THREE.WebGLRenderer( { antialias: true } );//using WebGL
	else
		renderer = new THREE.CanvasRenderer(); //using the (slower) Canvas 2D Context API

	renderer.setClearColor( 0xf0f0f0 ); //0xffffff
	renderer.setPixelRatio( window.devicePixelRatio );
	renderer.setSize( 	document.getElementById("ModelWindow").offsetWidth,
		 				document.getElementById("ModelWindow").offsetHeight
	);
	
	container.appendChild( renderer.domElement );

	//render
	renderer.render( scene, camera);
}



function onDocumentKeyDown(event)
{
	switch ( event.keyCode ) {

		case 16: isShiftDown = true; break; //shift, delete mode with click
		case 38: move_forward = true; break; // up
		case 40: move_backward = true; break; // down
		case 37: move_left = true; break; // left
		case 39: move_right = true; break; // right
		case 87: move_up = true; break; // w
		case 83: move_down = true; break; // s
		//case 65: targetMoveLeft = true; break; // a
		//case 68: targetMoveRight = true; break; // d
		
		case 90: is_rotating = true; break; // z

		//case 78: chooseModel=1;//n choose next model
		//case 77: chooseModel=-1;//m choose previous model

	}
}

function onDocumentKeyUp(event)
{
	switch ( event.keyCode ) {

		case 16: isShiftDown = false; break; //shift
		case 38: move_forward = false; break; // up
		case 40: move_backward = false; break; // down
		case 37: move_left = false; break; // left
		case 39: move_right = false; break; // right
		case 87: move_up = false; break; // w
		case 83: move_down = false; break; // s
		//case 65: targetMoveLeft = false; break; // a
		//case 68: targetMoveRight = false; break; // d
		case 90: is_rotating = false; break; // z

	}
}


// change window size
function onWindowResize()
{

	//camera.aspect = window.innerWidth / window.innerHeight;
	camera.aspect = windowRatio;
	camera.updateProjectionMatrix();

	//renderer.setSize( window.innerWidth, window.innerHeight );
	
	renderer.setSize( 	document.getElementById("ModelWindow").offsetWidth,
		 				document.getElementById("ModelWindow").offsetHeight
	);
}

function animate() {

	requestAnimationFrame( animate );

	//controls.update();
	
	render();

}

function render() 
{

	// 2.1 move around the scene
	
	if (move_forward){
		switch(current_view)
		{
			case 0: camera.position.z += MOVING_SPEED; break;
			case 1: camera.position.x -= MOVING_SPEED; break;
			case 2: camera.position.z -= MOVING_SPEED; break;
			case 3: camera.position.x += MOVING_SPEED; break;
		}
	}
	if (move_backward)
	{
		switch(current_view)
		{
			case 0: camera.position.z -= MOVING_SPEED; break;
			case 1: camera.position.x += MOVING_SPEED; break;
			case 2: camera.position.z += MOVING_SPEED; break;
			case 3: camera.position.x -= MOVING_SPEED; break;
		}
	}
	if (move_left)
	{
		switch(current_view)
		{
			case 0: camera.position.x += MOVING_SPEED; break;
			case 1: camera.position.z += MOVING_SPEED; break;
			case 2: camera.position.x -= MOVING_SPEED; break;
			case 3: camera.position.z -= MOVING_SPEED; break;
		}
	}
	if (move_right)
	{
		switch(current_view)
		{
			case 0: camera.position.x -= MOVING_SPEED; break;
			case 1: camera.position.z -= MOVING_SPEED; break;
			case 2: camera.position.x += MOVING_SPEED; break;
			case 3: camera.position.z += MOVING_SPEED; break;
		}
	}
	if (move_up)
	{
		camera.position.y += MOVING_SPEED;
	}
	if (move_down)
	{
		camera.position.y -= MOVING_SPEED;
	}
	
	// 2.2 rotating
	if (is_rotating)
	{
		current_view++;
		if (current_view >= views.length)
			current_view = 0;
		
		// remember current position
		var current_x = camera.position.x;
		var current_y = camera.position.y;
		var current_z = camera.position.z;
		
		// go to pre-defined position
		camera.position.x = views[current_view].x;
		camera.position.y = views[current_view].y;
		camera.position.z = views[current_view].z;
		
		camera.target = center_position;
		camera.lookAt( camera.target );
		
		// only rotate one time per click
		is_rotating = false;
		
	}

	//mouse position
	
	
	// random stuffs
	
	
	// update the scene
	renderer.render( scene, camera );
}
    function get_user_scenarios()
    {
        $('#search_results').html('');

        var post_data = {
            'filter_text': $('#filter_text').val(),
        };
        $.ajax({
            type: "POST",
            url: "{{ url_for('users.get_user_scenarios', username=user.username) }}",
            data: post_data,
            dataType: 'json',
            success: function(data) {
                $('#search_results').html('');
                for (i = 0; i < data.scenarios.length; i++)
                {
                    var scenario = data.scenarios[i];
                    $('#search_results').append('<a id="scenario_' + scenario.id + '" class="list-group-item" href="javascript:fetch_scenario(\'' + scenario.id + '\');">' + scenario.name + '</a>');
                }

                if ($('#scenario_id').val() == '')
                {
                    if (data.scenarios.length > 0)
                        fetch_scenario(data.scenarios[0].id);
                    else
                    {

                        $('#no_scenario_label').html('User has no scenario');
                        $('#no_scenario_block').fadeIn('fast');
                    }
                }
            }
        });
    }

    function fetch_scenario(scenario_id)
    {

        $(".well a").removeClass("active");
	    $('#scenario_'+scenario_id).addClass("active");

        $.ajax({
            type: "GET",
            url: "{{ url_for('sketchup.get_scenario') }}?id=" + scenario_id,
            dataType: 'json',
            success: function(data)
            {
                $('#scenario_id').val(data.id);
                $('#scenario_name').html('<a href="{{ url_for('sketchup.view_scenario') }}?id=' + data.id + '">' + data.name + '</a>');
                $('#profile_picture').attr('src', '{{ url_for('static', filename='images/profile_pictures') }}/' + data.owner.profile_picture);
                $('#created_user').html(data.owner.username);
                $('#created_time').html(Date.parse(data.created_time).toString('dd.MM.yyyy hh:mm:ss'));
                $('#object_id').val(data.id);
                if (data.last_edited_user != null)
                {
                    $('#last_edited_panel').show(0);
                    $('#last_edited_user').html(data.last_edited_user.username);
                    $('#last_edited_time').html(Date.parse(data.last_edited_time).toString('dd.MM.yyyy hh:mm:ss'));
                }
                $('#comment_list').html('');

                for (i=0; i < data.comments.length; i++)
                {
                    comment = data.comments[i];
                    var new_comment_html = '';
                    new_comment_html += '<li><div class="commenterImage"><img style="max-width:50px;max-height:50px;" src="{{ url_for('static', filename='images/profile_pictures') }}/' + comment.owner.profile_picture + '" /></div>';
                    new_comment_html += '<div class="commentText"><p class="">' + comment.content + '</p> <span class="date sub-text">By <a href="{{ request.url_root }}users/' + comment.owner.username + '/profile">' + comment.owner.username + '</a> on ' + Date.parse(comment.created_time).toString('dd.MM.yyyy hh:mm:ss') + '</span></div></li>';
                    $('#comment_list').append(new_comment_html);
                }
                $('#no_scenario_block').fadeOut('fast');
                $('#user_data_form').fadeIn('fast');

            }
        });
    }



{% endblock %}

{% block menu %}
	{% include 'inside_menu.html' %}
{% endblock %}

{% block main_content %}
<div class="">
	<div class="row" style="margin-top: 20px;">
        <div class="col-md-10 col-centered">
            <ol class = "breadcrumb">
               <li><a href = "{{ url_for('index') }}">Home</a></li>
               <li class = "active"><a href="{{ url_for('users.profile', username=user.username) }}">{{ user.username }}</a></li>
               <li class = "active"><a href="{{ url_for('users.user_scenarios_page', username=user.username) }}">Scenarios</a></li>
            </ol>
            <h2 style="font-size: 45px;">{{ user.username }}'s Scenarios</h2>

            <div class="col-md-4">
                <div class="row" style="margin-bottom:10px;">
                    <div class="col-md-12">
                        <a type="button" style="width:100%; margin-bottom:10px;" class="btn btn-primary" href="{{ url_for('users.add_scenario') }}">
                            <span class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span> Add scenario
                        </a>
                        <form id="scenario_search_form" method="POST" action="{{ url_for('users.get_user_scenarios', username=user.username) }}">
                            <input class="form-control input-lg" id="filter_text" name="filter_text" name="user_info" onkeyup="get_user_scenarios();" placeholder="Search by scenario name" type="text" value="">
                        </form>
                    </div>
                </div>
                <!-- Search result area -->
                <div class="row">
                    <div class="col-lg-12">
                        <div class="well">
                            <div class="list-group auto_list" id="search_results">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-8" id="no_scenario_block">
                <h3 id="no_scenario_label"></h3>
            </div>
            <div class="col-md-8" id="user_data_form" style="display:none">
                <h3><span id="scenario_name" style="font-weight: bold"></span></h3>
                <div style="float:left;">
                    <img id="profile_picture" src="{{ url_for('static', filename='images/profile_pictures/default_profile.png') }}" style="width:60px;"/>
                </div>
                <div style="float:left; margin-left:10px;">
                    <div>Created by <span id="created_user"></span> at <span id="created_time"></span></div>
                    <div id="last_edited_panel" style="display:none">Last edited by <span id="last_edited_user"></span> at <span id="last_edited_time"></span></div>
                </div>
                <div style="clear:both;margin-bottom:10px;"></div>

                <div id="scenario_content">
                    <input type="hidden" id="scenario_id" value="" />

                    <div style="width:100%;height:500px;border:1px solid black;"  id="ModelWindow">
                    </div>
                </div>
                <div id="scenario_comment_panel" style="margin-top:10px;">
                    <div class="detailBox">
                        <div class="titleBox">
                          <label>Comment Box</label>
                        </div>
                        <div class="commentBox">
                            <input type="hidden" id="comment_type" value="scenario" />
                            <input type="hidden" id="object_id" value="" />
                            <textarea id="new_comment" style="width:100%" class="form-control form-group" type="text" placeholder="Your comments" ></textarea>
                            <div class="form-group">
                                <button class="btn btn-default" onclick="add_comment();">Add</button>
                            </div>
                        </div>
                        <div class="actionBox">
                            <ul class="commentList" id="comment_list">

                            </ul>

                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>


{% endblock %}
